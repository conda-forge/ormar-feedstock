{% set name = "ormar" %}
{% set version = "0.10.25" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ormar-{{ version }}.tar.gz
  sha256: 27c771581417814f6933bc9ae38e1147b1435b1435b6c3f08b90301e9dc77de4

build:
  number: 0
  noarch: python
  script:
    - {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - poetry-core >=1.0.0
    - python >=3.6
  run:
    - aiosqlite >=0.17.0,<0.18.0
    - databases >=0.3.2,!=0.5.0,!=0.5.1,!=0.5.2,!=0.5.3,<=0.5.5
    - importlib-metadata >=3.1
    - pydantic >=1.6.1,!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<=1.9.1
    - python >=3.6
    - sqlalchemy >=1.3.18,<1.4.31
    - typing-extensions >=3.7,<4.0

test:
  imports:
    - ormar
    - ormar.decorators
    - ormar.fields
    - ormar.models
    - ormar.models.descriptors
    - ormar.models.helpers
    - ormar.models.mixins
    - ormar.protocols
    - ormar.queryset
    - ormar.queryset.actions
    - ormar.relations
    - ormar.signals
  commands:
    - pip check
  requires:
    - pip

about:
  home: https://github.com/collerek/ormar
  summary: A simple async ORM with fastapi in mind and pydantic validation.
  license: MIT
  license_file: LICENSE.md
  doc_url: https://collerek.github.io/ormar/
  description: |
    The ormar package is an async mini ORM for Python, with support for
     Postgres, MySQL, and SQLite. The main benefit of using ormar includes the
     ability to get an async ORM that can be used with async frameworks
     (fastapi, starlette etc.). Using ormar would simplly workflow with just one
     model to maintainâ€”you don't have to maintain pydantic and other orm model
     (sqlalchemy, peewee, gino etc.)

extra:
  recipe-maintainers:
    - thewchan
