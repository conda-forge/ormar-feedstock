{% set name = "ormar" %}
{% set version = "0.10.23" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ormar-{{ version }}.tar.gz
  sha256: bd8f86389db87f3844b25d7e1e47e18fa52b113877dcbad180f67d5a9597c9d3

build:
  number: 0
  noarch: python
  script:
    # Removing pyproject.toml here due to pip bug
    - {{ PYTHON }} -c "__import__('os').unlink('pyproject.toml')"
    - {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - poetry
    - python >=3.6
  run:
    - aiosqlite >=0.17.0,<0.18.0
    - databases >=0.3.2,<0.5.4
    - importlib-metadata >=3.1
    - pydantic >=1.6.1
    - python >=3.6
    - sqlalchemy >=1.3.18,<=1.4.26
    - typing-extensions >=3.7,<4.0

test:
  imports:
    - ormar
  commands:
    - pip check
  requires:
    - pip

about:
  home: https://github.com/collerek/ormar
  summary: A simple async ORM with fastapi in mind and pydantic validation.
  license: MIT
  license_file: LICENSE.md
  doc_url: https://collerek.github.io/ormar/
  description: |
    The ormar package is an async mini ORM for Python, with support for
     Postgres, MySQL, and SQLite. The main benefit of using ormar includes the
     ability to get an async ORM that can be used with async frameworks
     (fastapi, starlette etc.). Using ormar would simplly workflow with just one
     model to maintainâ€”you don't have to maintain pydantic and other orm model
     (sqlalchemy, peewee, gino etc.)

extra:
  recipe-maintainers:
    - thewchan
